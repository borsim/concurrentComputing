/*
 * fourAnts.xc
 *
 *  Created on: 4 Oct 2017
 *      Author: Rudy, Miki
 */

#include <platform.h>
#include <stdio.h>

struct ant {
    char x;
    char y;
    char food;
};
typedef struct ant ant;

const char field[3][4] = {{10,0,1,7},{2,10,0,3},{6,8,7,6}};

void queenServer (chanend a0, chanend a1) {
    int serving = 10;
    char a1food;
    char a0food;
    while (serving > 0) {
      a1 :> a1food;
      a0 :> a0food;
      if (a0food > a1food) {
          // 1 to keep moving, 0 to harvest
          a1 <: 1;
          a0 <: 0;
      } else {
          a1 <: 0;
          a0 <: 1;
      }
      serving--;
    }

}
void antClient (char field[3][4], ant *thisAnt, chanend c) {
    char x = thisAnt -> x;
    char y = thisAnt -> x;
    char food = thisAnt -> food;
    char instruction = 0;

    //report
    c <: field[x][y];
    //receive instruction
    c :> instruction;
    //perform approporiate action
    if (instruction == 0) {
        food += field[x][y];
    } else {
        for (int i = 0; i < 2; i ++){
            char east  = field[(x+1) % 3][(y) % 4];
            char south = field[(x) % 3][(y+1) % 4];
            if (east > south) {
               x = (x + 1) % 3;
            } else {
               y = (y + 1) % 4;
            }
        }
    }
    thisAnt -> x = x;
    thisAnt -> x = y;
    thisAnt -> food = food;
}



int main() {
    ant ant0;
    ant0 -> x = 1;
    ant0 -> y = 0;
    ant0 -> food = 0;
    ant ant1;
    ant1 -> x = 0;
    ant1 -> y = 1;
    ant1 -> food = 0;
    ant queen;
    queen -> x = 1;
    queen -> y = 1;
    queen -> food = 0;
    chan a1;
    chan a0;
    par {
        on tile[0]: queenServer(a0, a1);
        on tile[1]: antClient(field, ant0, a0);
        on tile[1]: antClient(field, ant1, a1);
    }

    return 0;
}





