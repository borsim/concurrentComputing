/*
 * fourAnts.xc
 *
 *  Created on: 4 Oct 2017
 *      Author: Rudy, Miki
 */

#include <platform.h>
#include <stdio.h>


const char field[3][4] = {{10,0,1,7},{2,10,0,3},{6,8,7,6}};
struct ant {
   char x;
   char y;
   char food;
};

typedef struct ant ant;

void initAnts(ant *ant0, ant *ant1, ant *ant2) {
/*
  char smallestXY[4][2] = {{0,0},{0,0},{0,0},{0,0}};
  int smallestValues[5] = {100,100,100,100,-1};
  for (int i = 0; i < 3; i++) {
     for (int j = 0; j < 4; j++) {
         int placed = 0;
         char value = field[i][j];
         if (value < smallestValues[0]) {
             for (int k = 0; k < 4; k++){
                 if ((value >= smallestValues[k+1]) && (placed == 0)){
                     for (int n = 0; n < k; n++){
                         smallestValues[n] = smallestValues[n+1];
                         smallestXY[n][0] = smallestXY[n+1][0];
                         smallestXY[n][1] = smallestXY[n+1][1];
                     }
                         smallestValues[k] = value;
                         smallestXY[k][0] = i;
                         smallestXY[k][1] = j;
                         placed = 1;
                 }
             }
         }
     }
  }
  //ant antlist[4]= {ant0, ant1, ant2, ant3};
  //for (int l = 0; l < 4; l++) {
      ant0->x = smallestXY[0][0];
      ant0->y = smallestXY[0][1];
      ant0->food = 0;
      ant1->x = smallestXY[1][0];
      ant1->y = smallestXY[1][1];
      ant1->food = 0;
      ant2->x = smallestXY[2][0];
      ant2->y = smallestXY[2][1];
      ant2->food = 0;
      ant3->x = smallestXY[3][0];
      ant3->y = smallestXY[3][1];
      ant3->food = 0;
      //printf("Ants at position %d %d \n", antlist[l].x, antlist[l].y );
  //}
      */
    ant ants = {ant0, ant1, ant2};
    ants[0] -> x = 0;
    ants[1] -> x = 1;
    ants[0] -> y = 1;
    ants[1] -> y = 0;
    ants[2] -> x = 1;
    ants[2] -> y = 1;

}

void queenServer (ant ants[3], chanend a1, chanend a0) {
    int serving = 10;
    char a1food;
    char a0food;
    while (serving > 0) {
      a1food <: a1;
      a0food <: a0;
      if (a0 > a1) {
          moveAnt(ants[1]);
          ants[0] -> food += a0food;
      } else {
          moveAnt(ants[0]);
          ants[1] -> food += a1food;
      }
      serving--;
    }

}
void antClient () {

}


void moveAnt(ant *myAnt) {
 //printf("%d\n",myAnt->x);
 char east  = field[(myAnt->x+1) % 3][(myAnt->y) % 4];
 char south = field[(myAnt->x) % 3][(myAnt->y+1) % 4];
 if (east > south) {
     myAnt->food += east;
     //printf("Ant has %d food.\n", myAnt->food);
     myAnt->x = (myAnt->x + 1) % 3;
 } else {
     myAnt->food += south;
     //printf("Ant has %d food.\n", myAnt->food);
     myAnt->y = (myAnt->y + 1) % 4;
 }
 //printf("My ant has food: %d \n", myAnt.food);
}


void moveAntRepedatedly(ant *myAnt, int times) {
    for (int i = 0; i < times; i++) {
        moveAnt(myAnt);
    }
}



int main() {
    ant ant0;
    ant ant1;
    ant queen;
    initAnts(&ant0, &ant1, &queen);
    chan a1;
    chan a0;

    return 0;
}





